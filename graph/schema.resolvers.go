package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"log"
	"time"
	"weather-api/graph/api"
	"weather-api/graph/cache"
	"weather-api/graph/model"
	"weather-api/graph/rc"
)

// GetWeatherData is the resolver for the getWeatherData field.
func (r *queryResolver) GetWeatherData(ctx context.Context, city string, date *string) (*model.WeatherResponse, error) {
	givenDate := time.Now().Format("2006-01-02")
	if date != nil {
		givenDate = *date
	}

	rdb := rc.GetRedis(ctx)
	redisKey := fmt.Sprintf("weather:%s:%s", city, givenDate)

	cached, errCache := cache.GetWeatherFromCache(ctx, rdb, redisKey)
	if errCache != nil {
		return nil, errCache
	}

	if cached != nil {
		log.Println("Returning from cache")
		return cached, nil
	}

	weather, err := api.GetWeatherFromAPI(city, givenDate)

	if err != nil {
		log.Println("Error in fetching the weather data from api")
		return nil, err
	}

	err = cache.SetWeatherInCache(ctx, rdb, redisKey, weather)
	if err != nil {
		log.Println("Failed to cache data:", err)
	}

	return weather, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
